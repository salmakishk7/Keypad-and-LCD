
Exercise1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000066c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000811  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include "keypad.h"

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	uint8 key;
	DDRC  |= 0x0F; /* 7-segment pins as output pins */
  76:	a4 e3       	ldi	r26, 0x34	; 52
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	8f 60       	ori	r24, 0x0F	; 15
  82:	8c 93       	st	X, r24
	PORTC &= 0xF0; /* 7-segment displays Zero at the beginning */
  84:	a5 e3       	ldi	r26, 0x35	; 53
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e5 e3       	ldi	r30, 0x35	; 53
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 7f       	andi	r24, 0xF0	; 240
  90:	8c 93       	st	X, r24
    while(1)
    {
        key = KeyPad_getPressedKey(); /* get the pressed button from keypad */
  92:	0e 94 54 00 	call	0xa8	; 0xa8 <KeyPad_getPressedKey>
  96:	89 83       	std	Y+1, r24	; 0x01
	    if((key >= 0) && (key <= 9))
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	8a 30       	cpi	r24, 0x0A	; 10
  9c:	d0 f7       	brcc	.-12     	; 0x92 <main+0x26>
		{ 
			 PORTC = key;
  9e:	e5 e3       	ldi	r30, 0x35	; 53
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	80 83       	st	Z, r24
  a6:	f5 cf       	rjmp	.-22     	; 0x92 <main+0x26>

000000a8 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	00 d0       	rcall	.+0      	; 0xae <KeyPad_getPressedKey+0x6>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
  b2:	1a 82       	std	Y+2, r1	; 0x02
  b4:	4d c0       	rjmp	.+154    	; 0x150 <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
  b6:	ea e3       	ldi	r30, 0x3A	; 58
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	8a 81       	ldd	r24, Y+2	; 0x02
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <KeyPad_getPressedKey+0x22>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	2a 95       	dec	r18
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <KeyPad_getPressedKey+0x1e>
  ce:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
  d0:	eb e3       	ldi	r30, 0x3B	; 59
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	8a 81       	ldd	r24, Y+2	; 0x02
  d6:	28 2f       	mov	r18, r24
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	80 e1       	ldi	r24, 0x10	; 16
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 2e       	mov	r0, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <KeyPad_getPressedKey+0x3e>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <KeyPad_getPressedKey+0x3a>
  ea:	80 95       	com	r24
  ec:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
  ee:	19 82       	std	Y+1, r1	; 0x01
  f0:	29 c0       	rjmp	.+82     	; 0x144 <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
  f2:	e9 e3       	ldi	r30, 0x39	; 57
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	88 2f       	mov	r24, r24
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	a9 01       	movw	r20, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <KeyPad_getPressedKey+0x62>
 106:	55 95       	asr	r21
 108:	47 95       	ror	r20
 10a:	8a 95       	dec	r24
 10c:	e2 f7       	brpl	.-8      	; 0x106 <KeyPad_getPressedKey+0x5e>
 10e:	ca 01       	movw	r24, r20
 110:	81 70       	andi	r24, 0x01	; 1
 112:	90 70       	andi	r25, 0x00	; 0
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	99 f4       	brne	.+38     	; 0x13e <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	28 2f       	mov	r18, r24
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	c9 01       	movw	r24, r18
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	82 0f       	add	r24, r18
 126:	93 1f       	adc	r25, r19
 128:	98 2f       	mov	r25, r24
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	89 0f       	add	r24, r25
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	0e 94 ad 00 	call	0x15a	; 0x15a <KeyPad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	89 83       	std	Y+1, r24	; 0x01
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	a0 f2       	brcs	.-88     	; 0xf2 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	8a 83       	std	Y+2, r24	; 0x02
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	83 30       	cpi	r24, 0x03	; 3
 154:	08 f4       	brcc	.+2      	; 0x158 <KeyPad_getPressedKey+0xb0>
 156:	af cf       	rjmp	.-162    	; 0xb6 <KeyPad_getPressedKey+0xe>
 158:	ac cf       	rjmp	.-168    	; 0xb2 <KeyPad_getPressedKey+0xa>

0000015a <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	00 d0       	rcall	.+0      	; 0x160 <KeyPad_4x3_adjustKeyNumber+0x6>
 160:	00 d0       	rcall	.+0      	; 0x162 <KeyPad_4x3_adjustKeyNumber+0x8>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	28 2f       	mov	r18, r24
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	3c 83       	std	Y+4, r19	; 0x04
 170:	2b 83       	std	Y+3, r18	; 0x03
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	9c 81       	ldd	r25, Y+4	; 0x04
 176:	8a 30       	cpi	r24, 0x0A	; 10
 178:	91 05       	cpc	r25, r1
 17a:	81 f0       	breq	.+32     	; 0x19c <KeyPad_4x3_adjustKeyNumber+0x42>
 17c:	2b 81       	ldd	r18, Y+3	; 0x03
 17e:	3c 81       	ldd	r19, Y+4	; 0x04
 180:	2a 30       	cpi	r18, 0x0A	; 10
 182:	31 05       	cpc	r19, r1
 184:	9c f0       	brlt	.+38     	; 0x1ac <KeyPad_4x3_adjustKeyNumber+0x52>
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	9c 81       	ldd	r25, Y+4	; 0x04
 18a:	8b 30       	cpi	r24, 0x0B	; 11
 18c:	91 05       	cpc	r25, r1
 18e:	49 f0       	breq	.+18     	; 0x1a2 <KeyPad_4x3_adjustKeyNumber+0x48>
 190:	2b 81       	ldd	r18, Y+3	; 0x03
 192:	3c 81       	ldd	r19, Y+4	; 0x04
 194:	2c 30       	cpi	r18, 0x0C	; 12
 196:	31 05       	cpc	r19, r1
 198:	31 f0       	breq	.+12     	; 0x1a6 <KeyPad_4x3_adjustKeyNumber+0x4c>
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of *
 19c:	3a e2       	ldi	r19, 0x2A	; 42
 19e:	3a 83       	std	Y+2, r19	; 0x02
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
 1a2:	1a 82       	std	Y+2, r1	; 0x02
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;		
		case 12: return '#'; // ASCII Code of #
 1a6:	83 e2       	ldi	r24, 0x23	; 35
 1a8:	8a 83       	std	Y+2, r24	; 0x02
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;								 						
 1ac:	99 81       	ldd	r25, Y+1	; 0x01
 1ae:	9a 83       	std	Y+2, r25	; 0x02
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
